#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
const SocketServer = require('ws').Server;
const ENV         = process.env.ENV || "development";
const knexConfig = require('../knexfile')    // require environment's settings from knexfile
const knex = require('knex')(knexConfig[ENV]); 
const uuid = require('uuid/v4');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Websocket server.
 */

const wss = new SocketServer({ server });

SocketServer.prototype.broadcast = function(msg) {
  this.clients.forEach((client) => {
      if (client.readyState === 1) {
        client.send(JSON.stringify(msg));
      }
  });
};

wss.on('connection', (ws) => {
  console.log('Client connected');

  // Set up a callback for when a client closes the socket. This usually means they closed their browser.
  ws.on('close', () => {
    console.log('Client disconnected');
  });

  ws.onmessage = evt => {
    const userInfo = JSON.parse(evt.data);
    console.log(`From ws server: ${userInfo.id}`);
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function findWinner(auction) {
  // Find the lowest, most unique bid
  knex('bids')
    .select(knex.raw('amount, count(amount)'))
    .where('auction_id', '=', auction.id)
    .groupBy('amount')
    .orderBy(['count', 'amount'])
    .first()
    .then((lowest_bid) => {
      console.log("lowest bid is:", lowest_bid);
      if(lowest_bid) {
        // Find the user(s) that made that bid
        knex('bids')
        .select('user_id')
        .where('amount', '=', lowest_bid.amount)
        .then((users) => {
          console.log(users)

          // Chooses winner randomly from pool of users with winning bids if all bid amounts have more than one bidder(i.e., tie) 
          if(users.length > 1) {
            var winner = users[Math.floor(Math.random() * users.length)].user_id
          } else {
            var winner = users[0].user_id
          }
          console.log("winner is:", winner)
          // Add the winner for that auction to the auctions table
          knex('auctions')
            .where('id', '=', auction.id)
            .update({winner: winner})
            .then(() => {
              return winner;
            })
        })
      } else {
        return null;
      }
    })
}

function sendNotifications(auction) {
  const notification = {
    id: uuid(),
    message: `Auction for ${auction.name} has ended. Please check results in profile.`,
    auctionName: auction.name
  }

  // Save to database
  knex('notifications')
    .insert({
      auction_id: auction.id,
      message: notification.message
    })
    .then()

  wss.broadcast(notification);

}

function checkAuctionEnd() {
  const currentTime = Date.now();
  
  // Select all auctions that have ended but have not had notifications sent yet
  knex('auctions')
    .where('end_time', '<=', currentTime)
    .andWhere('notifications_sent', false)
    .then((auctions) => {
      const auction_ids = auctions.map(auction => auction.id);
      for(auction of auctions){
        sendNotifications(auction);
        findWinner(auction);
      }
      // Update notifications_sent to true
      knex('auctions')
        .whereIn('id', auction_ids)
        .update({ notifications_sent: true })
        .then()
    })
    .then()

}

setInterval(checkAuctionEnd, 5000);